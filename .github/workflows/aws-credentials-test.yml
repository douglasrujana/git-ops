name: AWS Credentials Test

on:
  push:
    branches:
      - main  # O la rama donde quieras probar
jobs:
  aws-test:
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout repo
        uses: actions/checkout@v4

      - name: üîë Configurar credenciales de AWS
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: üîç Verificar AWS Account ID
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query "Account" --output text)
          echo "AWS Account ID actual: $ACCOUNT_ID"
          echo "AWS Account ID esperado: $AWS_ACCOUNT_ID_DEV"
      
          if [ "$ACCOUNT_ID" != "$AWS_ACCOUNT_ID_DEV" ]; then
            echo "‚ùå ERROR: El usuario est√° en la cuenta incorrecta ($ACCOUNT_ID). Se esperaba $AWS_ACCOUNT_ID_DEV."
            exit 1
          else
            echo "‚úÖ Validaci√≥n exitosa: Se est√° usando la cuenta correcta ($ACCOUNT_ID)."
          fi
        env:
          AWS_ACCOUNT_ID_DEV: ${{ secrets.AWS_ACCOUNT_ID_DEV }}

      - name: üîç Probar conexi√≥n con AWS
        run: |
          if aws sts get-caller-identity; then
            echo "‚úÖ Conexi√≥n exitosa a AWS"
          else
            echo "‚ùå Error al conectar con AWS"
            exit 1
          fi
          
      - name: üì¶ Instalar dependencias
        run: |
          cd apps/aws-cdk-ts
          npm install
  
      - name: üõ†Ô∏è Sintetizar plantilla de CloudFormation
        run: |
          cd apps/aws-cdk-ts
          npx cdk synth
  
      - name: üöÄ Desplegar infraestructura en AWS
        run: |
          cd apps/aws-cdk-ts
          npx cdk deploy --require-approval never    
